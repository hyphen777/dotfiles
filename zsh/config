export EDITOR='mvim'

fpath=(~/.zsh/functions $fpath)

autoload -U ~/.zsh/functions/*(:t)

HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000
REPORTTIME=10 # print elapsed time when more than 10 seconds

setopt NO_BG_NICE # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY # share history between sessions ???
setopt EXTENDED_HISTORY # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt IGNORE_EOF

setopt APPEND_HISTORY # adds history
setopt INC_APPEND_HISTORY SHARE_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS

zle -N newtab

autoload -Uz vcs_info

function git-need-to-push() {
  if pushtime=$(git status | grep 'Your branch is ahead' 2> /dev/null); then
    echo "↑ "
  fi
  }

function set_git_prompt() {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  export GIT_BRANCH=${ref#refs/heads/} || ''
  export GIT_START=''
  export GIT_END=''
  export GIT_STAGED=''
  export GIT_UNTRACKED=''
  export GIT_UNSTAGED=''
  export GIT_NEED_PUSH=''
  export DATE=`date +%H:%M:%S`
  STATUS=$(git status 2> /dev/null)
  if [[ -z $STATUS ]]
  then
    return
  fi

  export GIT_START='('
  export GIT_END=')'

  if [[ "$STATUS" == *'Your branch is ahead'* ]]
  then
    export GIT_NEED_PUSH='⟰'
  fi

  if [[ "$STATUS" == *'working directory clean'* ]]
  then
    export GIT_STATE=''
  else
    if [[ "$STATUS" == *'Changes to be committed:'* ]]
    then
      export GIT_STAGED='●'
    fi
    if [[ "$STATUS" == *'Changed but not updated:'* ]]
    then
      export GIT_UNSTAGED='●'
    fi
    if [[ "$STATUS" == *'Untracked files:'* ]]
    then
      export GIT_UNTRACKED='●'
    fi
  fi

  echo " %{$fg[yellow]%}$GIT_START%{$fg[yellow]%}$GIT_BRANCH%{$fg[red]%}$GIT_UNSTAGED%{$fg[green]%}$GIT_STAGED%{$fg[white]%}$GIT_UNTRACKED%{$fg[yellow]%}%{$fg[red]%}$GIT_NEED_PUSH%{$fg[yellow]%}$GIT_END"
}

zstyle ':vcs_info:*' stagedstr '%F{28}●'
zstyle ':vcs_info:*' unstagedstr '%F{11}●'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{11}%r'
zstyle ':vcs_info:*' enable git svn
precmd () {
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats ' [%F{green}%b%u%F{blue}]'
    } else {
        zstyle ':vcs_info:*' formats ' [%F{green}%b%u%F{red}●%F{blue}]'
    }

    vcs_info
}

setopt prompt_subst
# PROMPT='%F{blue}%n %c${vcs_info_msg_0_}%F{blue} %(?/%F{blue}/%F{red})%% %f'
PROMPT='%F{green}%c`set_git_prompt` %(?/%F{green}/%F{red})%(!.#.$) %f'
RPROMPT='%F{red}%/%F{green}'

export CLICOLOR=1
export LSCOLORS=GxCxcxdxBxegedHbHgHbbA

